<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>explain on The blog of Humility</title>
    <link>https://humility.github.io/tags/explain/</link>
    <description>Recent content in explain on The blog of Humility</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019, Weru and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Dec 2019 22:56:00 +0800</lastBuildDate>
    
	<atom:link href="https://humility.github.io/tags/explain/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初识链表</title>
      <link>https://humility.github.io/post/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 15 Dec 2019 22:56:00 +0800</pubDate>
      
      <guid>https://humility.github.io/post/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</guid>
      <description>初识链表 链表概述 链表是什么呢？简单地说它就是一个由一个个节点组成的一种储存数据的结构。节点里面有着该节点储存的数据和下一个节点的信息（对单项链表而言）。下面我打算用自己实现的简单的单向链表来带着大家熟悉一下诸如插入、删除、检索之类的基本操作。
链表的基本结构  首先是节点，一条链表就是完全由一个个节点链接而成的。  //节点，构成链表的基本元素。 //简单解释一下尖括号中的E，我们可以把它看成一种参数，需要在创建链表对象的时候传入。它就相当于链表中储存的数据的类型。也就是所谓的类型参数。下面所有涉及到节点的操作都需要这个类型参数。 class Node&amp;lt;E&amp;gt; { //节点内储存的数据。  E item; //该节点下一个节点的引用。（链表不能像数组一样通过下标来进行访问，想要访问某一个元素只能从头节点开始一个个的往后检索。）  Node&amp;lt;E&amp;gt; next; //节点的构造器，需要传入该节点的数据和下一个节点的信息。  public Node(E e,Node&amp;lt;E&amp;gt; n) { item = e; next = n; } }  然后是整体的链表。  //简易的链表，尖括号中的也是类型参数。 public class SimpleLinkedList&amp;lt;E&amp;gt; { //Node作为一个静态的内部类存在。 翻译过来也就是说Node类是链表的组成部分，但不依赖于链表的对象存在。  private static class Node&amp;lt;E&amp;gt; { E item; Node&amp;lt;E&amp;gt; next; public Node(E e,Node&amp;lt;E&amp;gt; n) { item = e; next = n; } } //链表的长度，用一个size来记录。  int size = 0; //头节点。也就是链表的开始。  Node&amp;lt;E&amp;gt; head; } 可以看到，就属性而言，链表中只有记录长度的size和一个头节点head。而从物理层面上来讲，head这个头节点包含了其他所有节点。但是从逻辑角度上来讲，所有节点的地位都是相同的，他们一个连接着一个共同构成了一个链表。我们思考链表的时候可以从逻辑的角度出发或许会更易于理解。</description>
    </item>
    
    <item>
      <title>About recursion.</title>
      <link>https://humility.github.io/post/recursion/</link>
      <pubDate>Fri, 06 Dec 2019 22:11:07 +0800</pubDate>
      
      <guid>https://humility.github.io/post/recursion/</guid>
      <description>递归那些事儿 简介  递归,就是递归。
 这句话便是一个典型的递归定义：递归是什么呢？递归是递归，而递归又是 什么呢？。。。。这样层层嵌套，无穷匮也。
可如果真的要说他是递归，他还不算完整。因为他陷入了一个死循环，永远没有办法出来，更别说让他来告诉我们递归的真正含意了。
 详解 递归，直白的说就是让函数自己调用自己的一种技巧。他有别与循环，更加符合人类的思维习惯。因其形式简洁、思维清晰，所以有着相当广泛的应用。
虽是自己调用自己，但也不是一尘不变的。在解决复杂问题的时候，递归就像是在把问题分解，分解成一个个便于解决的小问题。也就是在每一层调用的时候解决掉问题的一小部分，剩下那个规模已经缩小的部分交给下面的自己解决。。。以此类推，等到问题的规模足够小之后就一鼓作气全部解决。
想必你已经从上面看出了递归的两个要素了吧。没错，一个就是缩小问题的条件，还有一个就是让递归终止的条件了（这个让递归终止的条件不可或缺，你绝对不能让一个递归永远进行下去）。前面一个我们称之为递归条件，后面一个我们称之为基线条件。下面一起来看一个递归的简单应用，在这之前我要简单的说一下函数调用栈的概念。（不是什么可怕的东西，但是关乎对程序执行过程的理解。）
函数调用栈 栈，是程序运行时操作系统给它分配的一块内存空间。而函数调用栈（或者简称调用栈）是存放函数调用信息的一块内存空间。程序启动时由系统调用main方法，然后在main方法又会调用各种各样的方法。每调用一个方法都会把它的调用信息压在调用栈的最上方。系统会从调用栈最上方的方法开始执行，如果该方法中调用了别的方法，就会把它压在自己上方等待他先执行。执行结束的方法会被清除。（这也就是所谓的退栈操作）没有执行结束的方法会一直存在（它的各种成员变量都会被保存在那边），等待上方执行完成。
另外，函数的调用信息还是比较占内存的。而调用栈大小有限，这也就是为什么递归层数不能过深的原因了。
简单应用 /** * 一个简单的求阶乘的函数 * 使用递归实现 * @param n The num that we want to work out whose factorial * @return The result of the factorial of n */ public static int factorial(int n) { //下面的就是所谓的基线条件，是让这个递归函数开始返回的条件。  if ( n == 1 || n == 0 ) return 1; //下面的是递归条件，它把n！的阶乘处理掉了一部分，然后剩下的都交给了下一个自己。  return n*factorial(n-1); }  关于 限于篇幅，还有很多东西没能一一赘述。现在就全部列在下面供感兴趣的同学去了解。</description>
    </item>
    
  </channel>
</rss>