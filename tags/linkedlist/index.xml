<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linkedList on The blog of Humility</title>
    <link>https://humility.github.io/tags/linkedlist/</link>
    <description>Recent content in linkedList on The blog of Humility</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019, Weru and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Dec 2019 22:56:00 +0800</lastBuildDate>
    
	<atom:link href="https://humility.github.io/tags/linkedlist/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初识链表</title>
      <link>https://humility.github.io/post/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 15 Dec 2019 22:56:00 +0800</pubDate>
      
      <guid>https://humility.github.io/post/%E5%88%9D%E8%AF%86%E9%93%BE%E8%A1%A8/</guid>
      <description>初识链表 链表概述 链表是什么呢？简单地说它就是一个由一个个节点组成的一种储存数据的结构。节点里面有着该节点储存的数据和下一个节点的信息（对单项链表而言）。下面我打算用自己实现的简单的单向链表来带着大家熟悉一下诸如插入、删除、检索之类的基本操作。
链表的基本结构  首先是节点，一条链表就是完全由一个个节点链接而成的。  //节点，构成链表的基本元素。 //简单解释一下尖括号中的E，我们可以把它看成一种参数，需要在创建链表对象的时候传入。它就相当于链表中储存的数据的类型。也就是所谓的类型参数。下面所有涉及到节点的操作都需要这个类型参数。 class Node&amp;lt;E&amp;gt; { //节点内储存的数据。  E item; //该节点下一个节点的引用。（链表不能像数组一样通过下标来进行访问，想要访问某一个元素只能从头节点开始一个个的往后检索。）  Node&amp;lt;E&amp;gt; next; //节点的构造器，需要传入该节点的数据和下一个节点的信息。  public Node(E e,Node&amp;lt;E&amp;gt; n) { item = e; next = n; } }  然后是整体的链表。  //简易的链表，尖括号中的也是类型参数。 public class SimpleLinkedList&amp;lt;E&amp;gt; { //Node作为一个静态的内部类存在。 翻译过来也就是说Node类是链表的组成部分，但不依赖于链表的对象存在。  private static class Node&amp;lt;E&amp;gt; { E item; Node&amp;lt;E&amp;gt; next; public Node(E e,Node&amp;lt;E&amp;gt; n) { item = e; next = n; } } //链表的长度，用一个size来记录。  int size = 0; //头节点。也就是链表的开始。  Node&amp;lt;E&amp;gt; head; } 可以看到，就属性而言，链表中只有记录长度的size和一个头节点head。而从物理层面上来讲，head这个头节点包含了其他所有节点。但是从逻辑角度上来讲，所有节点的地位都是相同的，他们一个连接着一个共同构成了一个链表。我们思考链表的时候可以从逻辑的角度出发或许会更易于理解。</description>
    </item>
    
  </channel>
</rss>